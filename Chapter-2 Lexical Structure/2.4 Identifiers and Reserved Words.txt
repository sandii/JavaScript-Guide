2.4 Identifiers and Reserved Words
An identifieris simply a name. In JavaScript, identifiers are used to name variables and functions and to provide labels for certain loops in JavaScript code. A JavaScript iden-tifier must begin with a letter, an underscore (_), or a dollar sign ($). Subsequent char-acters can be letters, digits, underscores, or dollar signs. (Digits are not allowed as the first character so that JavaScript can easily distinguish identifiers from numbers.) These
are all legal identifiers:
i
my_variable_name
v13
_dummy
$str

For portability and ease of editing, it is common to use only ASCII letters and digits in identifiers. Note, however, that JavaScript allows identifiers to contain letters and digits from the entire Unicode character set. (Technically, the ECMAScript standard also allows Unicode characters from the obscure categories Mn, Mc, and Pc to appear in identifiers after the first character.) This allows programmers to use variable names from non-English languages and also to use mathematical symbols:
var sí = true;
var π = 3.14;
Like any language, JavaScript reserves certain identifiers for use by the language itself.
These “reserved words” cannot be used as regular identifiers. They are listed below.

2.4 标识符和保留字
标识符，直白地说就是变量或函数的名字。JS的所有标识符只能以字母、数字、下划线_或$组成，且开头不能是数字，以便和数值区分。以下是合法的标识符：
i
my_variable_name
v13
_dummy
$str

理论上，整个Unicode里的字母都可以用来命名标识符，甚至数学符号也行，但是为了代码好维护可移植，标识符一般只用ASCII里的字母。
var sí = true;
var π = 3.14;


2.4.1 Reserved Words
JavaScript reserves a number of identifiers as the keywords of the language itself. You cannot use these words as identifiers in your programs:
break delete function return typeof
case do if switch var
catch else in this void
continue false instanceof throw while
debugger finally new true with
default for null try

JavaScript also reserves certain keywords that are not currently used by the language but which might be used in future versions. ECMAScript 5 reserves the following words:
class const enum export extends import super

In addition, the following words, which are legal in ordinary JavaScript code, are reserved in strict mode:
implements let private public yield
interface package protected static

Strict mode also imposes restrictions on the use of the following identifiers. They are not fully reserved, but they are not allowed as variable, function, or parameter names:
arguments eval

ECMAScript 3 reserved all the keywords of the Java language, and although this has been relaxed in ECMAScript 5, you should still avoid all of these identifiers if you plan to run your code under an ECMAScript 3 implementation of JavaScript:
abstract double goto native static
boolean enum implements package super
byte export import private synchronized
char extends int protected throws
class final interface public transient
const float long short volatile

JavaScript predefines a number of global variables and functions, and you should avoid using their names for your own variables and functions:
arguments encodeURI Infinity Number RegExp
Array encodeURIComponent isFinite Object String
Boolean Error isNaN parseFloat SyntaxError
Date eval JSON parseInt TypeError
decodeURI EvalError Math RangeError undefined
decodeURIComponent Function NaN ReferenceError URIError

Keep in mind that JavaScript implementations may define other global variables and functions, and each specific JavaScript embedding (client-side, server-side, etc.) will have its own list of global properties. See the Window object in Part IV for a list of the global variables and functions defined by client-side JavaScript.


2.4.1 保留字
和其他所有语言一样，JS也保留了一批标识符作为系统关键字，不能用来做标识符：
break delete function return typeof
case do if switch var
catch else in this void
continue false instanceof throw while
debugger finally new true with
default for null try

ES5又加了一批保留字，虽然它们现在还没被正式启用：
class const enum export extends import super

还有一批在严格模式下的保留字，稳妥起见，也要避开：
implements let private public yield
interface package protected static

在严格模式下，这两个词也被加了限制，不能被用作变量名、函数名和参数名:
arguments eval

ES3保留了所有Java保留字，虽然在ES5取消了这个限制，但是稳妥起见，也尽量避开。
abstract double goto native static
boolean enum implements package super
byte export import private synchronized
char extends int protected throws
class final interface public transient
const float long short volatile

还有以下这批全局变量和方法名也得避开：
arguments encodeURI Infinity Number RegExp
Array encodeURIComponent isFinite Object String
Boolean Error isNaN parseFloat SyntaxError
Date eval JSON parseInt TypeError
decodeURI EvalError Math RangeError undefined
decodeURIComponent Function NaN ReferenceError URIError

另外还要注意避开的是，各种JavaScript的实现和框架分别定义的全局变量和全局函数。
比如，第四部分中，我们会详细列出客户端JS中Window对象下挂载的一系列全局变量和全局函数。
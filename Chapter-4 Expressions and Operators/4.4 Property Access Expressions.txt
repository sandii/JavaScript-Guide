4.4 Property Access Expressions

4.4 属性访问表达式


A property access expression evaluates to the value of an object property or an array element. JavaScript defines two syntaxes for property access:
expression. identifier
expression[ expression]
The first style of property access is an expression followed by a period and an identifier. The expression specifies the object, and the identifier specifies the name of the desired property. The second style of property access follows the first expression (the object or array) with another expression in square brackets. This second expression specifies the name of the desired property of the index of the desired array element. Here are some concrete examples:
var o = {x:1,y:{z:3}}; 	// An example object
var a = [o,4,[5,6]]; 	// An example array that contains the object
o.x 					// => 1: property x of expression o
o.y.z 					// => 3: property z of expression o.y
o["x"] 					// => 1: property x of object o
a[1] 					// => 4: element at index 1 of expression a
a[2]["1"] 				// => 6: element at index 1 of expression a[2]
a[0].x 					// => 1: property x of expression a[0]

JavaScript访问属性有两种方式，第一种只能用于对象，第二种对象和数组都能用：
表达式.标识符
表达式[表达式]
var o = {x:1,y:{z:3}};
var a = [o,4,[5,6]];
o.x 	  // => 1
o.y.z 	  // => 3
o["x"] 	  // => 1
a[1] 	  // => 4
a[2]["1"] // => 6
a[0].x 	  // => 1


With either type of property access expression, the expression before the . or [ is first evaluated. If the value is null or undefined, the expression throws a TypeError, since these are the two JavaScript values that cannot have properties. If the value is not an object (or array), it is converted to one (see 3.6). If the object expression is followed by a dot and an identifier, the value of the property named by that identifier is looked up and becomes the overall value of the expression. If the object expression is followed by another expression in square brackets, that second expression is evaluated and converted to a string. The overall value of the expression is then the value of the property named by that string. In either case, if the named property does not exist, then the value of the property access expression is undefined.

.和[之前的表达式先被计算，若结果为null或undefined，整个表达式抛出TypeError，因为这两个值是不可能有属性的。
若结果不是对象或数组，将执行类型转换（见3.6）。
若用的是第二种访问方式，[]中的值会被先转换为字符串。
若发现被查询的对象没有相应属性，那么查询的返回值为undefined。


The .identifier syntax is the simpler of the two property access options, but notice that it can only be used when the property you want to access has a name that is a legal identifier, and when you know then name when you write the program. If the property name is a reserved word or includes spaces or punctuation characters, or when it is a number (for arrays), you must use the square bracket notation. Square brackets are also used when the property name is not static but is itself the result of a computation (see 6.2.1 for an example).

用第一种访问方法.出来显然更方便一些，但是要注意有以下几种情况是只能用[]的：
1、属性名为保留字
2、属性名中包含空格或标点符号
3、属性名为数字（数组）
4、属性名非静态（见6.2.1中的例子）


Objects and their properties are covered in detail in Chapter 6, and arrays and their elements are covered in Chapter 7.
对象和数组在第6和第7章中会做详述。
4.7.7 Order of Evaluation

4.7.7 解析顺序


Operator precedence and associativity specify the order in which operations are performed in a complex expression, but they do not specify the order in which the subexpressions are evaluated. JavaScript always evaluates expressions in strictly left-to-right order. In the expression w=x+y*z, for example, the subexpression w is evaluated first, followed by  x,  y, and  z. Then the values of y and z are multiplied, added to the value of x, and assigned to the variable or property specified by expression w. Adding parentheses to the expressions can change the relative order of the multiplication, addition, and assignment, but not the left-to-right order of evaluation.

最后需要知道的就是次级表达式们的解析顺序。一般来说都是从左到右，括号只能改变运算顺序，改变不了表达式的解析顺序。比如说表达式w=x+y*z，先解析w，再依次解析x、y、z，之后才开始算乘法、加法、赋值。


Order of evaluation only makes a difference if any of the expressions being evaluated has side effects that affect the value of another expression. If expression x increments a variable that is used by expression z, then the fact that x is evaluated before z is important.

只有当被解析的表达式相互之间会互相影响时，就能看出解析顺序的影响了。
以上例为例，若表达式x会改变某个变量的值，而表达式z也会用到该变量，
那么我们就会发现，x比z先解析。

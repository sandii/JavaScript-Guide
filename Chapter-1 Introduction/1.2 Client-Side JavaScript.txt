1.2 Client-Side JavaScript

1.2 客户端JavaScript


Client-side JavaScript does not exhibit the nonlinear cross-reference problem nearly to the extent that the core language does, and it is possible to learn how to use JavaScript in web browsers in a fairly linear sequence. But you’re probably reading this book to learn client-side JavaScript, and  Part II is a long way off, so this section is a quick sketch of basic client-side programming techniques, followed by an in-depth example.

客户端JavaScript这部分内容比较好组织，从易到难，由浅入深。因为它终于不再像JS语言核心的知识点那样相互关联、难以分类了。但是这部分内容很多，我们这里只能做一个非常大致的概述，最后再举一个略有难度的例子。


Chapter 13, JavaScript in Web Browsers, is the first chapter of Part II and it explains in detail how to put JavaScript to work in web browsers. The most important thing you’ll learn in that chapter is that JavaScript code can be embedded within HTML files using the <script> tag:

第13章，Web浏览器中的JavaScript，作为第二部分的开头，这一章节的内容确实也是最基础的：如何让JS在浏览器中跑起来————把JS代码写在HTMl文件的<script>标签里就行了。


----------------------------------------

<html>
<head>
<script src="library.js"></script> <!-- include a library of JavaScript code -->
</head>
<body>
<p>This is a paragraph of HTML</p>
<script>
// And this is some client-side JavaScript code
// literally embedded within the HTML file
</script>
<p>Here is more HTML.</p>
</body>
</html>

<html>
<head>
<script src="library.js"></script> <!-- include a library of JavaScript code -->
</head>
<body>
<p>This is a paragraph of HTML</p>
<script>
// 把JS代码写在这里面就行了
</script>
<p>Here is more HTML.</p>
</body>
</html>

-------------------------------------------


Chapter 14, The Window Object, explains techniques for scripting the web browser and covers some important global functions of client-side JavaScript. For example:

第14章，window对象，讲解在浏览器中设置、运行脚本的技巧和客户端JS的一些全局函数。例子：

--------------------------------------------

<script>
function moveon() {
// Display a modal dialog to ask the user a question
var answer = confirm("Ready to move on?");
// If they clicked the "OK" button, make the browser load a new page
if (answer) window.location = "http://google.com";
}
// Run the function defined above 1 minute (60,000 milliseconds) from now.
setTimeout(moveon, 60000);
</script>


<script>
function moveon() {
	var answer = confirm("Ready to move on?");			// 弹出对话框，向用户提问
	if (answer) window.location = "http://google.com";	//用户点ok，页面跳转到google
}
setTimeout(moveon, 60000);								// 1分钟后执行此函数
</script>

------------------------------------------


Note that the client-side example code shown in this section comes in longer snippets than the core language examples earlier in the chapter. These examples are not designed to be typed into a Firebug (or similar) console window. Instead you can embed them in an HTML file and try them out by loading them in your web browser. The code above, for instance, works as a stand-alone HTML file.

注意到了吗？这些例子比我们讲JS语言核心时举的那些要长多了。别把他们输入到FireBug或者其他开发者工具里去运行。正确的做法是把他们粘到HTML文件里去，直接用浏览器去读这个HTML。


Chapter 15, Scripting Documents, gets down to the real business of client-side JavaScript, scripting HTML document content. It shows you how to select particular HTML elements from within a document, how to set HTML attributes of those elements, how to alter the content of those elements, and how to add new elements to the document. This function demonstrates a number of these basic document searching and modification techniques:

第15章，脚本文件，介绍浏览器端JS的真实业务，看看它怎么完成选中页面元素、修改他们的属性、为页面添加新元素、弹窗提示等各种操作。例子：


------------------------------------------

// Display a message in a special debugging output section of the document.
// If the document does not contain such a section, create one.
function debug(msg) {
	// Find the debugging section of the document, looking at HTML id attributes
	var log = document.getElementById("debuglog");
	// If no element with the id "debuglog" exists, create one.
	if (!log) {
		log = document.createElement("div");	// Create a new <div> element
		log.id = "debuglog";					// Set the HTML id attribute on it
		log.innerHTML = "<h1>Debug Log</h1>";	// Define initial content
		document.body.appendChild(log);			// Add it at end of document
	}
	// Now wrap the message in its own <pre> and append it to the log
	var pre = document.createElement("pre");	// Create a <pre> tag
	var text = document.createTextNode(msg);	// Wrap msg in a text node
	pre.appendChild(text);						// Add text to the <pre>
	log.appendChild(pre);						// Add <pre> to the log
}

// 向页面中的提示区域输出错误信息，若无此区域，创建一个
function debug(msg) {
	var log = document.getElementById("debuglog"); 
	if (!log) { 
		log = document.createElement("div");
		log.id = "debuglog";
		log.innerHTML = "<h1>Debug Log</h1>";
		document.body.appendChild(log);
	}	
	var pre = document.createElement("pre");
	var text = document.createTextNode(msg); 
	pre.appendChild(text);
	log.appendChild(pre);
}

----------------------------------------------


Chapter 15 shows how JavaScript can script the HTML elements that define web content. Chapter 16, Scripting CSS, shows how you can use JavaScript with the CSS styles that define the presentation of that content. This is often done with the style or class attribute of HTML elements:

第15章讲JS怎么操作页面内容，第16章则介绍她如何操作CSS样式。一般来说JS操作样式是通过修改样式表或者修改页面元素的class属性来完成的：


----------------------------------------

function hide(e, reflow) {				// Hide the element e by scripting its style
	if (reflow) {						// If 2nd argument is true
		e.style.display = "none";		// hide element and use its space
	}else { 							// Otherwise
		e.style.visibility = "hidden";	// make e invisible, but leave its space
	}
}
function highlight(e) {					// Highlight e by setting a CSS class
	// Simply define or append to the HTML class attribute.
	// This assumes that a CSS stylesheet already defines the "hilite" class
	if (!e.className) e.className = "hilite";
	else e.className += " hilite";
}

function hide(e, reflow) {
	if (reflow) { 
		e.style.display = "none"		// 隐藏，不保留其位置
	}else { 
		e.style.visibility = "hidden";	// 隐藏，但保留其位置
	}
}
function highlight(e) {					//假设已在CSS中定义了.hilite的样式
	if (!e.className) e.className = "hilite";
	else e.className += " hilite";
}

------------------------------------------


JavaScript allows us to script the HTML content and CSS presentation of documents in web browsers, but it also allows us to define behavior for those documents with event handlers. An event handler is a JavaScript function that we register with the browser and the browser invokes when some specified type of event occurs. The event of interest might be a mouse click or a key press (or on a smart phone, it might be a two-finger gesture of some sort). Or an event handler might be triggered when the browser finishes loading a document, when the user resizes the browser window, or when the user enters data into an HTML form element. Chapter 17, Handling Events, explains how you can define and register event handlers and how the browser invokes them when events occur.

JS能操作HTML内容和CSS样式，通过绑定事件还能控制页面行为。我们预先将某个事件和它的回调函数绑定在浏览器上，当这个事件发生时，浏览器就会调用它的回调函数，执行操作。这个事件可以是鼠标点击，也可以是按下键盘的某个键，可以是用两根手指滑动手机屏幕，也可以是浏览器下载完成某个文件，可以是用户调整了浏览器窗口大小，还可以是用户在HTML表单中输入了内容。这些内容，第17章将会详述。


The simplest way to define event handlers is with HTML attributes that begin with “on”. The “onclick” handler is a particularly useful one when you’re writing simple test programs. Suppose that you had typed in the debug() and hide() functions from above and saved them in files named  debug.js and  hide.js. You could write a simple HTML test file using <button> elements with onclick event handler attributes:
<script src="debug.js"></script>
<script src="hide.js"></script>
Hello
<button onclick="hide(this,true); debug('hide button 1');">Hide1</button>
<button onclick="hide(this); debug('hide button 2');">Hide2</button>
World

最简单的绑定事件的方法是设置HTML元素的一系列“on”属性。最好用的当然是“onclick”。结合刚才例子中的debug()和hide()函数，看以下代码如何把鼠标点击事件绑定在按钮<button>上吧：
<script src="debug.js"></script>
<script src="hide.js"></script>
Hello
<button onclick="hide(this,true); debug('hide button 1');">Hide1</button>
<button onclick="hide(this); debug('hide button 2');">Hide2</button>
World


Here is some more client-side JavaScript code that uses events. It registers an event handler for the very important “load” event, and it also demonstrates a more sophisticated way of registering event handler functions for “click” events:

再看以下这段代码，展示了“load”事件和另一种事件绑定方式，这种方式比为页面元素添加on属性加更常用：


// The "load" event occurs when a document is fully loaded. Usually we
// need to wait for this event before we start running our JavaScript code.
window.onload = function() { // Run this function when the document loads
	// Find all <img> tags in the document
	var images = document.getElementsByTagName("img");
	// Loop through them, adding an event handler for "click" events to each
	// so that clicking on the image hides it.
	for(var i = 0; i < images.length; i++) {
		var image = images[i];
		if (image.addEventListener)			// Another way to register a handler
			image.addEventListener("click", hide, false);
		else 								// For compatibility with IE8 and before
			image.attachEvent("onclick", hide);
	}
	// This is the event handler function registered above
	function hide(event) { event.target.style.visibility = "hidden"; }
};

// 当文件下载完成时，load事件被触发。通常，所有JS代码都要等到整个页面文档都下载完之后才开始执行。
window.onload = function() { 
	var images = document.getElementsByTagName("img");	//获取所有img标签
	for(var i = 0; i < images.length; i++) {
		var image = images[i];
		//最常用的事件绑定方法
		if (image.addEventListener) image.addEventListener("click", hide, false);
		//照顾ie8及其以下
		else image.attachEvent("onclick", hide);
	}
	// 这是回调函数hide();
	function hide(event) { event.target.style.visibility = "hidden"; }
};


Chapters  15,  16, and  17 explain how you can use JavaScript to script the content (HTML), presentation (CSS), and behavior (event handling) of web pages. The APIs described in those chapters are somewhat complex and, until recently, riddled with browser incompatibilities. For these reasons, many or most client-side JavaScript pro-grammers choose to use a client-side library or framework to simplify their basic pro-gramming tasks. The most popular such library is jQuery, the subject of Chapter 19, The jQuery Library. jQuery defines a clever and easy-to-use API for scripting document content, presentation, and behavior. It has been thoroughly tested and works in all major browsers, including old ones like IE6.

第15、16、17章分别讲解了如何用JS控制网页内容（HTML）、样式（CSS）和行为（事件绑定）。鉴于本部分JS的原生API极其复杂，加上各种浏览器不同的兼容性一起来捣乱，所以写浏览器端JS的程序员为了不被逼疯，一般都要使用JS的类库或框架。现在最流行的框架是jQuery，可以兼容IE6，第19章就是介绍它的。


jQuery code is easy to identify because it makes frequent use of a function named $(). Here is what the debug() function used previously looks like when rewritten to use jQuery:
function debug(msg) {
	var log = $("#debuglog");
	if (log.length == 0) { 
		log = $("<div id='debuglog'><h1>Debug Log</h1></div>");
		log.appendTo(document.body); 
	}
	log.append($("<pre/>").text(msg)); 
}

jQuery的代码很好认，因为它老得用$()函数。以下是debug()函数的jQuery版本：
function debug(msg) {
	var log = $("#debuglog");
	if (log.length == 0) { 
		log = $("<div id='debuglog'><h1>Debug Log</h1></div>");
		log.appendTo(document.body); 
	}
	log.append($("<pre/>").text(msg)); 
}


The four chapters of Part II described so far have all really been about web pages. Four more chapters shift gears to focus on web applications. These chapters are not about using web browsers to display documents with scriptable content, presentation, and behavior. Instead, they’re about using web browsers as application platforms, and they describe the APIs that modern browsers provide to support sophisticated client-side web apps. Chapter 18, Scripted HTTP, explains how to make scripted HTTP requests with JavaScript a kind of networking API. Chapter 20, Client-Side Storage, describes mechanisms for storing data—and even entire applications—on the client side for use in future browsing sessions. Chapter 21, Scripted Media and Graphics, covers a client-side API for drawing arbitrary graphics in an HTML <canvas> tag. And, finally, Chapter 22,  HTML5 APIs, covers an assortment of new web app APIs specified by or affiliated with HTML5. Networking, storage, graphics: these are OS-type services being provided by the web browser, defining a new cross-platform application environment. If you are targeting browsers that support these new APIs, it is an exciting time to be a client-side JavaScript programmer. There are no code samples from these final four chapters here, but the extended example below uses some of these new APIs.

第14-17章内容都是针对网页的，而从18到21章我们转而介绍Web App。第18章讲如何用JS发送HTTP请求。第20章讲如何利用浏览器存储数据，乃至储存整个应用。第21章讲如何在HTML的<canvas>标签绘制图表。最后一章，第22章，简单的讲一下HTML5。有了网络、存储、图表，就可以模拟出跨平台能力极强的环境。最后的几章内容可以看看以下的大例子，它展示了如何应用这些技术。
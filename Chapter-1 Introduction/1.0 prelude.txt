JavaScript is the programming language of the Web. The overwhelming majority of
modern websites use JavaScript, and all modern web browsers—on desktops, game
consoles, tablets, and smart phones—include JavaScript interpreters, making Java-Script the most ubiquitous programming language in history. JavaScript is part of the
triad of technologies that all Web developers must learn: HTML to specify the content
of web pages, CSS to specify the presentation of web pages, and JavaScript to specify
the behavior of web pages. This book will help you master the language.

JavaScript是一门Web编程语言，是有史以来使用最广泛的语言之一，也是Web前端程序员必备三大技能之一：HTML定义网页内容，CSS负责页面样式，而JavaScript则掌管页面交互行为。


If you are already familiar with other programming languages, it may help you to know
that JavaScript is a high-level, dynamic, untyped interpreted programming language
that is well-suited to object-oriented and functional programming styles. JavaScript
derives its syntax from Java, its first-class functions from Scheme, and its prototype-based inheritance from Self. But you do not need to know any of those languages, or
be familiar with those terms, to use this book and learn JavaScript.

与其他语言相比，JavaScript是一门高级、动态、无类型解释的语言，她以函数式编程的风格实现了面向对象。JavaScript的语法源于Java，函数风格源于Scheme，其prototype式的继承源于Self。就算不会以上提到的这些语言也无妨，不影响我们学习JavaScript。


The name “JavaScript” is actually somewhat misleading. Except for a superficial syn-tactic resemblance, JavaScript is completely different from the Java programming lan-guage. And JavaScript has long since outgrown its scripting-language roots to become
a robust and efficient general-purpose language. The latest version of the language (see the sidebar) defines new features for serious large-scale software development.

JavaScript的名字容易让人误以为她和Java有所联系，其实除了语法上相似，他们基本没有关联。作为一门长期独立发展的脚本语言，JavaScript目前成长得相当健壮、功能十分强大。


*****************
JavaScript: Names and Versions

JavaScript: 命名和版本


JavaScript was created at Netscape in the early days of the Web, and technically, “Java-Script” is a trademark licensed from Sun Microsystems (now Oracle) used to describe Netscape’s (now Mozilla’s) implementation of the language. Netscape submitted the language for standardization to ECMA—the European Computer Manufacturer’s Association—and because of trademark issues, the standardized version of the language was stuck with the awkward name “ECMAScript.” For the same trademark reasons, Microsoft’s version of the language is formally known as “JScript.” In practice, just about everyone calls the language JavaScript. This book uses the name “ECMAScript” only to refer to the language standard.

在Web技术萌芽的早些年，JavaScript由Netscape开发出来。“Java-Script”其实是Sun（现在是Oracle）的一个注册商标。因为商标问题，当初Netscape把她提交给ECMA的时候官方名称叫“ECMAScript”，而Microsoft的版本叫““JScript”。但现实中，大家一般叫它JavaScript。


For the last decade, all web browsers have implemented version 3 of the ECMAScript
standard and there has really been no need to think about version numbers: the lan-guage standard was stable and browser implementations of the language were, for the
most part, interoperable. Recently, an important new version of the language has been
defined as ECMAScript version 5 and, at the time of this writing, browsers are beginning to implement it. This book covers all the new features of ECMAScript 5 as well as all the long-standing features of ECMAScript 3. You’ll sometimes see these language ver-sions abbreviated as ES3 and ES5, just as you’ll sometimes see the name JavaScript abbreviated as JavaScript.

在过去十年，JavaScript语言标准很稳定，所有的浏览器都用ECMAScript第三版标准，基本不需要考虑JavaScript的版本问题。但是，新发布的第五版标准改动较大。由此产生的区别，本书将加以区分，分别标注为ES3和ES5。


When we’re speaking of the language itself, the only version numbers that are relevant
are ECMAScript versions 3 or 5. (Version 4 of ECMAScript was under development for years, but proved to be too ambitious and was never released.) 

有人可能会问，为什么是第三版和第五版，第四版呢？其实，第四版已经开发了好多年，可惜最后被证明摊子铺的太大，没能收住，因此至今也未发布。


Sometimes, however, you’ll also see a JavaScript version number, such as JavaScript 1.5 or JavaScript 1.8. These are Mozilla’s version numbers: version 1.5 is basically ECMAScript 3, and later versions include nonstandard language extensions (see Chapter 11). 

还有时候你可能还会看见1.5或者1.8这样的版本号，不要惊慌，这些指的是Mozilla版本，都是基于JavaScript第三版。各种版本及其衍生出的非标准分支，请看第11章。


Finally, there are also version numbers attached to particular JavaScript interpreters or “engines.” Google calls its JavaScript interpreter V8, for example, and at the time of this writing the current version of the V8 engine is 3.0.

此外，还有各种根据不同JavaScript解析引擎所命名的版本号，比如Google著名的V8。目前V8用的版本号是3.0。

*****************

To be useful, every language must have a platform or standard library or API of functions for performing things like basic input and output. The core JavaScript language defines a minimal API for working with text, arrays, dates, and regular expressions but does not include any input or output functionality. Input and output (as well as more sophisticated features, such as networking, storage, and graphics) are the responsibility of the “host environment” within which JavaScript is embedded. Usually that host environment is a web browser (though we’ll see two uses of JavaScript without a web browser in Chapter 12). 

一般来说，编程语言都会自带一些基础的函数用于输入输出，但JavaScript没有。JavaScript只有相当少的API用于处理文本、数组、日期等一些常用的数据，至于输入输出，乃至更复杂的网络、存储、图标等等功能都交给浏览器去完成了。因为，大多数情况下，JavaScript都是在浏览器里运行，这些事情浏览器都能干，从而省去了JavaScript的工作。（当然，不用浏览器，JavaScript也能运行，详见第12章）


Part I of this book covers the language itself and its minimal built-in API.  

本书第一部分说说JavaScript语言本身及其自带的API。


Part II explains how JavaScript is used in web browsers and covers the sprawling browser-based APIs loosely known as “client-side JavaScript.”

第二部分讲解JavaScript如何作用于浏览器，也就是所谓的“客户端JavaScript”。


Part III is the reference section for the core API. You can read about the JavaScript array manipulation API by looking up “Array” in this part of the book, for example.

第三部分是JavaScript核心API的参考手册。比如，要看JavaScript处理数组有哪些接口，就可以在此部分中查“Array”。


Part IVis the reference section for client-side JavaScript. You might look up “Canvas” in this part of the book to read about the graphics API defined by the HTML5
<canvas> element, for example.

第四部分是客户端JavaScript的参考手册。比如，想看HTML5的canvas标签如何画图，请在此部分中查“Canvas”。


This book covers low-level fundamentals first, and then builds on those to more
advanced and higher-level abstractions. The chapters are intended to be read more or
less in order. But learning a new programming language is never a linear process, and
describing a language is not linear either: each language feature is related to other features and this book is full of cross-references—sometimes backward and sometimes
forward to material you have not yet read. 

整体上，本书从易到难，从浅到深。但是语言的功能总是相互关联的，学习一门语言并非一个纯线性过程，描述一门语言同样如此。因此本书有些部分会有些跳跃，在讲解部分内容的时候可能会牵涉到后面某些尚未讲解的知识，也可能需要回顾从前的某些内容。


This chapter makes a quick first pass through the core language and the client-side API, introducing key features that will make it easier to understand the in-depth treatment in the chapters that follow.

本章我们先概述一下JavaScript的核心语言和客户端API。对这些核心功能的整体把握将有助于理解后面更深层次的内容。



******************
Exploring JavaScript

探索JavaScript


When learning a new programming language, it’s important to try the examples in the book, and then modify them and try them again to test your understanding of the language. To do that, you need a JavaScript interpreter. Fortunately, every web browser includes a JavaScript interpreter, and if you’re reading this book, you probably already have more than one web browser installed on your computer. We’ll see later on in this chapter that you can embed JavaScript code within <script> tags in HTML files, and when the browser loads the file, it will execute the code. Fortunately, however, you don’t have to do that every time you want to try out simple snippets of JavaScript code. Spurred on by the powerful and innovative Firebug extension for Firefox (pictured in  Figure 1-1 and available for download from  http://getfirebug.com/), today’s web browsers all include web developer tools that are indispensable for debugging, experimenting, and learning. You can usually find these tools in the Tools menu of the browser under names like “Developer Tools” or “Web Console.” (Firefox 4 includes a built-in “Web Console,” but at the time of this writing, the Firebug extension is better.) Often, you can call up a console with a keystroke like F12 or Ctrl-Shift-J. These console tools often appear as panes at the top or bottom of the browser window, but some allow you to open them as separate windows (as pictured in Figure 1-1), which is often quite convenient. A typical “developer tools” pane or window includes multiple tabs that allow you to inspect things like HTML document structure, CSS styles, network requests, and so on. One of the tabs is a “JavaScript console” that allows you to type in lines of JavaScript code and try them out. This is a particularly easy way to play around with JavaScript, and I recommend that you use it as you read this book.

学语言，重要的是动手自己写代码。而学习JavaScript最方便的就是，只要浏览器就能运行和调试代码。大多数现代浏览器都包含有“开发者工具”，只要点击F12或者Ctrl-Shift-J调出控制台，就能方便地查看HTML结构，CSS样式表和网络请求。控制台里还有JavaScript调试工具，可以直接输入JavaScript代码并运行。


There is a simple console API that is portably implemented by modern browsers. You can use the function  console.log() to display text on the console. This is often surprisingly helpful while debugging, and some of the examples in this book (even in the core language section) use console.log() to perform simple output. A similar but more intrusive way to display output or debugging messages is by passing a string of text to the alert() function, which displays it in a modal dialog box.

JavaScript提供了两个简单实用的输出方法。一个是console.log()，它能在控制台中输出内容。另一个是alert()，通过弹窗的方式进行输出。这两种方法在代码调试和debbug极其常用。


************************

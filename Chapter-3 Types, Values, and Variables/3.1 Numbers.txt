3.1 Numbers

3.1 数字

Unlike many languages, JavaScript does not make a distinction between integer values
and floating-point values. All numbers in JavaScript are represented as floating-point
values. JavaScript represents numbers using the 64-bit floating-point format defined
by the IEEE 754 standard, （This format should be familiar to Java programmers as the format of the double type. It is also the double format used in almost all modern implementations of C and C++.）

和其他许多语言不同，JavaScript不分整数和浮点数，所有数字都以IEEE-754标准的64位浮点数储存，（即Java以及现代版本的C和C++的double类型）。


which means it can represent numbers as large as
±1.7976931348623157 × 10(308)
and as small as ±5 × 10(−324).

用这个格式，我们可以表示的数字范围相当之广：
从±1.7976931348623157 × 10(308)
到±5 × 10(−324).


The JavaScript number format allows you to exactly represent all integers between
−9007199254740992 = −2(53) and 9007199254740992 = 2(53), inclusive. If you use integer
values larger than this, you may lose precision in the trailing digits. Note, however, that
certain operations in JavaScript (such as array indexing and the bitwise operators de-scribed in Chapter 4) are performed with 32-bit integers.

因此，JavaScript整数大小范围是从−9007199254740992 = −2(53)到9007199254740992 = 2(53)。若整数大于这个值，则优先牺牲后面位数的精度。但JavaScript中也有某些地方用32位整数，范围没有这么大，比如数组的索引和位操作。


When a number appears directly in a JavaScript program, it’s called a numeric literal.
JavaScript supports numeric literals in several formats, as described in the following
sections. Note that any numeric literal can be preceded by a minus sign (-) to make the
number negative. Technically, however, - is the unary negation operator (see Chapter 4) and is not part of the numeric literal syntax.

以下部分将讲解JavaScript中数字符的几种格式。需要注意的是，数字之前的减号可以用于表达负数，但实际上减号是一个运算符（见第4章），并非数字的一部分。


3.1.1 Integer Literals

3.1.1 整形字符


In a JavaScript program, a base-10 integer is written as a sequence of digits. For
example:
0
3
10000000

最简单的是十进制：
0
3
10000000


In addition to base-10 integer literals, JavaScript recognizes hexadecimal (base-16) values. A hexadecimal literal begins with “0x” or “0X”, followed by a string of hexadecimal
digits. A hexadecimal digit is one of the digits 0 through 9 or the letters a (or A) through f (or F), which represent values 10 through 15. Here are examples of hexadecimal integer literals:
0xff 	// 15*16 + 15 = 255 (base 10)
0xCAFE911

然后是十六进制，以“0x”或“0X”开头，用从0到f（大写F也行）表示0到15：
0xff 	// 15*16 + 15 = 255
0xCAFE911


Although the ECMAScript standard does not support them, some implementations of JavaScript allow you to specify integer literals in octal (base-8) format. An octal literal begins with the digit 0 and is followed by a sequence of digits, each between 0 and 7.
For example:
0377 	// 3*64 + 7*8 + 7 = 255 (base 10)

八进制虽然ECMAScript不支持，但是有在部分JavaScript版本中是可以的。以0开头的就是八进制数，字符从0到7：
0377 	// 3*64 + 7*8 + 7 = 255 


Since some implementations support octal literals and some do not, you should never
write an integer literal with a leading zero; you cannot know in this case whether an
implementation will interpret it as an octal or decimal value. In the strict mode of
ECMAScript 5 (§5.7.3), octal literals are explicitly forbidden.

由于兼容性不统一，稳妥起见还是别用八进制数，以0开始的数容易和小数混淆，而且ES5在严格模式下也禁止八进制。


3.1.2 Floating-Point Literals

3.1.2 浮点数


Floating-point literals can have a decimal point; they use the traditional syntax for real
numbers. A real value is represented as the integral part of the number, followed by a
decimal point and the fractional part of the number.

Floating-point literals may also be represented using exponential notation: a real number followed by the letter e (or E), followed by an optional plus or minus sign, followed
by an integer exponent. This notation represents the real number multiplied by 10 to
the power of the exponent.
More succinctly, the syntax is:
[digits][.digits][(E|e)[(+|-)]digits]
For example:
3.14
2345.789
.333333333333333333
6.02e23 // 6.02 × 10(23)
1.4738223E-32 // 1.4738223 × 10(−32)

小数有两种表达法，用小数点和科学计数法。科学计数法用的是字母e（大写E也行）：
3.14
2345.789
.333333333333333333
6.02e23 		// 6.02 × 10(23)
1.4738223E-32 	// 1.4738223 × 10(−32)


3.1.3 Arithmetic in JavaScript

3.1.3 JavaScript算术


JavaScript programs work with numbers using the arithmetic operators that the language provides. These include + for addition, - for subtraction, * for multiplication, / for division, and % for modulo (remainder after division). Full details on these
and other operators can be found in Chapter 4.

这里先将几个最基本的运算符，加减乘除余+-×/%，更高级的运算符我们第4章再说。


In addition to these basic arithmetic operators, JavaScript supports more complex
mathematical operations through a set of functions and constants defined as properties
of the Math object:
Math.pow(2,53) 			// => 9007199254740992: 2 to the power 53
Math.round(.6) 			// => 1.0: round to the nearest integer
Math.ceil(.6) 			// => 1.0: round up to an integer
Math.floor(.6) 			// => 0.0: round down to an integer
Math.abs(-5) 			// => 5: absolute value
Math.max(x,y,z) 		// Return the largest argument
Math.min(x,y,z) 		// Return the smallest argument
Math.random() 			// Pseudo-random number x where 0 <= x < 1.0
Math.PI 				// π: circumference of a circle / diameter
Math.E 					// e: The base of the natural logarithm
Math.sqrt(3) 			// The square root of 3
Math.pow(3, 1/3) 		// The cube root of 3
Math.sin(0) 			// Trigonometry: also Math.cos, Math.atan, etc.
Math.log(10) 			// Natural logarithm of 10
Math.log(100)/Math.LN10 // Base 10 logarithm of 100
Math.log(512)/Math.LN2 	// Base 2 logarithm of 512
Math.exp(3) 			// Math.E cubed
See the Math object in the reference section for complete details on all the mathematical
functions supported by JavaScript.

除了运算符，JS还提供了一套数学函数，作为方法挂在Math对象上：
Math.pow(2,53) 			// => 9007199254740992 乘方
Math.round(.6) 			// => 1.0 求最接近的整数
Math.ceil(.6) 			// => 1.0 取顶
Math.floor(.6) 			// => 0.0 取底
Math.abs(-5) 			// => 5 绝对值
Math.max(x,y,z) 		// 返回最大值
Math.min(x,y,z) 		// 返回最小值
Math.random() 			// 生成一个范围在[0,1)的假随机数
Math.PI 				// π
Math.E 					// e
Math.sqrt(3) 			// 平方根
Math.pow(3, 1/3) 		// 开方
Math.sin(0) 			// 三角函数，还有Math.cos、Math.atan等
Math.log(10) 			// 对数
Math.log(100)/Math.LN10
Math.log(512)/Math.LN2 
Math.exp(3)				// e的3次幂


Arithmetic in JavaScript does not raise errors in cases of overflow, underflow, or division by zero. When the result of a numeric operation is larger than the largest representable number (overflow), the result is a special infinity value, which JavaScript prints as Infinity. Similarly, when a negative value becomes larger than the largest representable negative number, the result is negative infinity, printed as -Infinity. The infinite values behave as you would expect: adding, subtracting, multiplying, or dividing
them by anything results in an infinite value (possibly with the sign reversed).
Underflow occurs when the result of a numeric operation is closer to zero than the
smallest representable number. In this case, JavaScript returns 0. If underflow occurs
from a negative number, JavaScript returns a special value known as “negative zero.”
This value is almost completely indistinguishable from regular zero and JavaScript
programmers rarely need to detect it.
Division by zero is not an error in JavaScript: it simply returns infinity or negative
infinity. There is one exception, however: zero divided by zero does not have a well-defined value, and the result of this operation is the special not-a-number value, printed
as NaN.  NaN also arises if you attempt to divide infinity by infinity, or take the square
root of a negative number or use arithmetic operators with non-numeric operands that
cannot be converted to numbers.

JS对于上溢、下溢和除以零的计算不会报错。上溢，是指算术结果超过JS所能表示的最大值和最小值，这时会产生一个叫做无限大的值，写作Infinity或-Infinity，这个值还能继续计算。下溢，指的是计算结果过于接近0，JS将返回0，如果是负数则会返回一个“负0”。这两个0的区别是底层程序员才需要研究的内容，我们就不用管了。除以0的算术也会产生Infinity或-Infinity。
以下几种JS无法处理的算术，JS会返回NaN，Not a Number。比如0除以0，Infinity除以Infinity，求负数的平方根，以及计算那些无法被转换为数字的字符。


JavaScript predefines global variables Infinity and NaN to hold the positive infinity and
not-a-number value. In ECMAScript 3, these are read/write values and can be changed.
ECMAScript 5 corrects this and makes the values read-only. The Number object defines
alternatives that are read-only even in ECMAScript 3. Here are some examples:
Infinity 					// A read/write variable initialized to Infinity.
Number.POSITIVE_INFINITY 	// Same value, read-only.
1/0 						// This is also the same value.
Number.MAX_VALUE + 1 		// This also evaluates to Infinity.
Number.NEGATIVE_INFINITY 	// These expressions are negative infinity.
-Infinity
-1/0 
-Number.MAX_VALUE - 1
NaN 						// A read/write variable initialized to NaN.
Number.NaN 					// A read-only property holding the same value.
0/0 						// Evaluates to NaN.
Number.MIN_VALUE/2 			// Underflow: evaluates to 0
-Number.MIN_VALUE/2 		// Negative zero
-1/Infinity 				// Also negative 0
-0

Infinity和NaN是全局变量，在ES3中，它们的值是可变的，到ES5被修正成为只读变量。Number对象也带有Inifity和NaN，值不可改变，即使在ES3也是：
Infinity 					// ECMAScript3中值可变。
Number.POSITIVE_INFINITY 	// 值相同，但是只读变量。
1/0 						// 又一个Infinity。
Number.MAX_VALUE + 1 		// 再来一个Infinity。
Number.NEGATIVE_INFINITY 	// -Infinity.
-Infinity
-1/0 
-Number.MAX_VALUE - 1
NaN 						// ES3中值可变。
Number.NaN 					// 只读。
0/0 						// 有一个NaN.
Number.MIN_VALUE/2 			// 下溢 0
-Number.MIN_VALUE/2 		// 下溢 -0
-1/Infinity 				// 下溢 -0
-0


The not-a-number value has one unusual feature in JavaScript: it does not compare
equal to any other value, including itself. This means that you can’t write x == NaN to
determine whether the value of a variable x is NaN. Instead, you should write  x != x.
That expression will be true if, and only if, x is NaN. 
The function isNaN() is similar. It
returns true if its argument is NaN, or if that argument is a non-numeric value such as
a string or an object. The related function isFinite() returns true if its argument is a
number other than NaN, Infinity, or -Infinity.

NaN有个特性，它和任何其他变量都不相等，包括自己。x==NaN这种表达式永远不可能返回true，哪怕x真的是NaN。换个说法，表达式x != x当且仅当x为NaN时返回true。
相类似的，全局函数isNaN()，用于鉴别参数是否为NaN或非数字值，例如字符串或对象。
而全局函数isFinite()只有当参数为非NaN、Infinity或-Infinity的数字时，返回true。


The negative zero value is also somewhat unusual. It compares equal (even using JavaScript’s strict equality test) to positive zero, which means that the two values are almost indistinguishable, except when used as a divisor:
var zero = 0; 		// Regular zero
var negz = -0; 		// Negative zero
zero === negz 		// => true: zero and negative zero are equal 
1/zero === 1/negz 	// => false: infinity and -infinity are not equal

而-0和0几乎是无法区分的，除非是被用作除数：
var zero = 0;
var negz = -0;
zero === negz 		// => true 完全相等 
1/zero === 1/negz 	// => false  infinity和-infinity不相等


3.1.4 Binary Floating-Point and Rounding Errors

3.1.4 二进制原理所造成的浮点数误差


There are infinitely many real numbers, but only a finite number of them
(18437736874454810627, to be exact) can be represented exactly by the JavaScript
floating-point format. This means that when you’re working with real numbers in
JavaScript, the representation of the number will often be an approximation of the
actual number.

实数是无限多的，但是JavaScript表达能力有限（确切地说，JS总共只能表达18437736874454810627个实数），绝大多数浮点数都只能是近似值。


The IEEE-754 floating-point representation used by JavaScript (and just about every
other modern programming language) is a binary representation, which can exactly
represent fractions like 1/2, 1/8, and 1/1024. Unfortunately, the fractions we use most
commonly (especially when performing financial calculations) are decimal fractions
1/10, 1/100, and so on. Binary floating-point representations cannot exactly represent
numbers as simple as 0.1.

JS和绝大多数语言都是以二进制来表示浮点数的，这导致他们只能准确表达1/2、1/8、1/1024这类的数，其他数都只能是近似值，就算是0.1也一样。


JavaScript numbers have plenty of precision and can approximate 0.1 very closely. But
the fact that this number cannot be represented exactly can lead to problems. Consider
this code:
var x = .3 - .2; 	// thirty cents minus 20 cents
var y = .2 - .1; 	// twenty cents minus 10 cents
x == y 				// => false: the two values are not the same!
x == .1 			// => false: .3-.2 is not equal to .1
y == .1 			// => true: .2-.1 is equal to .1

这就会导致以下的问题：
var x = .3 - .2;
var y = .2 - .1;
x == y 				// => false 出问题啦!
x == .1 			// => false
y == .1 			// => true


Because of rounding error, the difference between the approximations of .3 and .2 is
not exactly the same as the difference between the approximations of .2 and .1. It is
important to understand that this problem is not specific to JavaScript: it affects any
programming language that uses binary floating-point numbers. Also, note that the
values x and y in the code above are very close to each other and to the correct value.
The computed values are adequate for almost any purpose: the problem arises when
we attempt to compare values for equality.

这个问题在绝大多数现代变成语言中都存在。
一般来说，由于这种误差很小，并不会影响其他功能，只有当比较的时候才会露馅。


A future version of JavaScript may support a decimal numeric type that avoids these
rounding issues. Until then you might want to perform critical financial calculations
using scaled integers. For example, you might manipulate monetary values as integer
cents rather than fractional dollars.

未来版本的JavaScript可能会支持十进制表示浮点数，从而修正这个问题。在此之前，我们若想在精确计算中避免这个问题的话，比如金融相关的计算，就必须得使用整数。


3.1.5 Dates and Times

3.1.5 日期和时间


Core JavaScript includes a Date() constructor for creating objects that represent dates
and times. These Date objects have methods that provide an API for simple date computations. Date objects are not a fundamental type like numbers are. This section presents a quick tutorial on working with dates. Full details can be found in the reference section:
var then = new Date(2010, 0, 1);// The 1st day of the 1st month of 2010
var later = new Date(2010, 0, 1, 17, 10, 30);// Same day, at 5:10:30pm, local time
var now = new Date(); 			// The current date and time
var elapsed = now - then; 		// Date subtraction: interval in milliseconds 
later.getFullYear() 			// => 2010
later.getMonth() 				// => 0: zero-based months
later.getDate() 				// => 1: one-based days
later.getDay() 					// => 5: day of week. 0 is Sunday 5 is Friday.
later.getHours() 				// => 17: 5pm, local time
later.getUTCHours() 			// hours in UTC time; depends on timezone
later.toString() 				// => "Fri Jan 01 2010 17:10:30 GMT-0800 (PST)"
later.toUTCString() 			// => "Sat, 02 Jan 2010 01:10:30 GMT"
later.toLocaleDateString() 		// => "01/01/2010"
later.toLocaleTimeString() 		// => "05:10:30 PM"
later.toISOString() 			// => "2010-01-02T01:10:30.000Z"; ES5 only

JS自带Date类用于处理日期和时间：
var then = new Date(2010, 0, 1);
var later = new Date(2010, 0, 1, 17, 10, 30);
var now = new Date();
var elapsed = now - then; 	// 结果的单位是毫秒 
later.getFullYear() 		// => 2010
later.getMonth() 			// => 0 月份从0开始
later.getDate() 			// => 1 日期从1开始
later.getDay() 				// => 5 星期0-6，0为周日
later.getHours() 			// => 17 当地时间
later.getUTCHours() 		// 格林威治标准时间
later.toString() 			// => "Fri Jan 01 2010 17:10:30 GMT-0800 (PST)"
later.toUTCString() 		// => "Sat, 02 Jan 2010 01:10:30 GMT"
later.toLocaleDateString() 	// => "01/01/2010"
later.toLocaleTimeString() 	// => "05:10:30 PM"
later.toISOString() 		// => "2010-01-02T01:10:30.000Z"; 仅ES5支持

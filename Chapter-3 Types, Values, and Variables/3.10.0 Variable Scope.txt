3.10 Variable Scope

3.10 变量作用域


The scope of a variable is the region of your program source code in which it is defined. A global variable has global scope; it is defined everywhere in your JavaScript code. On the other hand, variables declared within a function are defined only within the body of the function. They are local variables and have local scope. Function parameters also count as local variables and are defined only within the body of the function. Within the body of a function, a local variable takes precedence over a global variable with the same name. If you declare a local variable or function parameter with the same name as a global variable, you effectively hide the global variable:
var scope = "global";	 // Declare a global variable
function checkscope() {
	var scope = "local"; // Declare a local variable with the same name
	return scope; 		 // Return the local value, not the global one
}
checkscope() 			 // => "local"

变量的作用域和它被声明的位置有关。声明在代码的最外层，就是全局变量；声明在函数中，就是函数的本地变量。函数的参数也被视为本地变量。本地变量享有比全局变量更高的优先权，如果两者同名，在本地变量的作用域中，同名的全局变量会被暂时隐藏：
var scope = "global";	 // 声明一个全局变量
function checkscope() {
	var scope = "local"; // 声明一个同名的本地变量
	return scope;
}
checkscope(); 			 // => "local" 被返回的是本地变量


Although you can get away with not using the var statement when you write code in
the global scope, you must always use var to declare local variables. Consider what
happens if you don’t:
scope = "global"; // Declare a global variable, even without var.
function checkscope2() {
	scope = "local"; 		 // Oops! We just changed the global variable.
	myscope = "local"; 		 // This implicitly declares a new global variable.
	return [scope, myscope]; // Return two values.
}
checkscope2(); 				 // => ["local", "local"]: has side effects!
scope 						 // => "local": global variable has changed.
myscope 					 // => "local": global namespace cluttered up.

所有不使用var语句的声明或赋值都会产生或修改全局变量，为了安全，请杜绝此类用法：
scope = "global"; 			 // 全局
function checkscope2() {
	scope = "local"; 		 // 全局
	myscope = "local"; 		 // 全局
	return [scope, myscope];
}
checkscope2(); 				 // => ["local", "local"]
scope 						 // => "local"
myscope 					 // => "local"


Function definitions can be nested. Each function has its own local scope, so it is possible to have several nested layers of local scope. For example:
var scope = "global scope";				// A global variable
function checkscope() {
	var scope = "local scope";			// A local variable
		function nested() {
			var scope = "nested scope"; // A nested scope of local variables
			return scope;				// Return the value in scope here
		}
	return nested();
}
checkscope();							// => "nested scope"

函数的声明可以嵌套，所以变量也可以有多层的作用域：
var scope = "global scope";				// 全局
function checkscope() {
	var scope = "local scope";			// 第一层
		function nested() {
			var scope = "nested scope"; // 第二层
			return scope;
		}
	return nested();
}
checkscope();							// => "nested scope"
